// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AdessibindenContext))]
    [Migration("20240110070742_add-description-to-product")]
    partial class adddescriptiontoproduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.CarBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("carBrands", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarChassisType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("carChassisTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarFuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("carFuelTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("BrandId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("ModelYear")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("carModels", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarProductCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CarProductCategoryId");

                    b.Property<int>("ChassisTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ChassisTypeId");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("ColorId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("EngineDisplacement")
                        .HasColumnType("integer");

                    b.Property<int>("EnginePower")
                        .HasColumnType("integer");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("FuelTypeId");

                    b.Property<int>("Gear")
                        .HasColumnType("integer");

                    b.Property<int>("Kilometer")
                        .HasColumnType("integer");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer")
                        .HasColumnName("ModelId");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Warranty")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CarProductCategoryId");

                    b.HasIndex("ChassisTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductId");

                    b.ToTable("carProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("carProductCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("computerBrands", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerOperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("computerOperatingSystems", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerProcessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int?>("Gen")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("computerProcessors", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("BrandId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("integer")
                        .HasColumnName("OperatingSystemId");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("integer")
                        .HasColumnName("ProcessorId");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<int>("RAMId")
                        .HasColumnType("integer")
                        .HasColumnName("RAMId");

                    b.Property<int>("SSDCapacityId")
                        .HasColumnType("integer")
                        .HasColumnName("SSDCapacityId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("VideoCardId")
                        .HasColumnType("integer")
                        .HasColumnName("VideoCardId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RAMId");

                    b.HasIndex("SSDCapacityId");

                    b.HasIndex("VideoCardId");

                    b.ToTable("computerProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerRAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Memory");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("computerRAMs", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerSSDCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Capacity");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("computerSSDCapacities", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerVideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Memory");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("computerVideoCards", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("operationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Models.PhoneBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("phoneBrands", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneInternalMemory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Capacity");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("phoneInternalMemories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("BrandId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("phoneModels", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("ColorId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("InternalMemoryId")
                        .HasColumnType("integer")
                        .HasColumnName("InternalMemoryId");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer")
                        .HasColumnName("ModelId");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<int>("RAMId")
                        .HasColumnType("integer")
                        .HasColumnName("RAMId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("UsageStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("UsageStatus");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("InternalMemoryId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RAMId");

                    b.ToTable("phoneProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneRAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Memory");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("phoneRAMs", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatorUserId");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Description");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductCategoryId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("productCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Expires");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("ReplacedByToken");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Revoked");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("RevokedByIp");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("PasswordSalt");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            PasswordHash = "sOu9h4ZZKabeS0fUigYDlkbFAGO0ervuQa3zJx8h7++H5fgtzQXdJZF54re9pF7c1eni/HpPm5LBD3A9ACM61A==",
                            PasswordSalt = "xFC/T28J2Hwaagk7zeJEJCYR4EW+lE3OQ6r6z4EyVv9W0jvLH0998F1mYEFRzI8S7TFYXBeLFflbXwe5G7f0TvBVfP8JxoSpuTA/M2Od8Asw21MhKF7ppS5XkgwxW/5EvgOOQIHCZnQzssHbQAJ0oPCTIP1EmJ4PP8wRYQJglU4=",
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Models.UserFavouriteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("userFavouriteProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("userOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationClaimId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("character varying")
                        .HasColumnName("Address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying")
                        .HasColumnName("LastName");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userProfiles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarModel", b =>
                {
                    b.HasOne("Domain.Models.CarBrand", "Brand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("BrandId_fkey");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Models.CarProduct", b =>
                {
                    b.HasOne("Domain.Models.CarProductCategory", "CarProductCategory")
                        .WithMany("CarProducts")
                        .HasForeignKey("CarProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("CarProductCategoryId_fkey");

                    b.HasOne("Domain.Models.CarChassisType", "ChassisType")
                        .WithMany("CarProducts")
                        .HasForeignKey("ChassisTypeId")
                        .IsRequired()
                        .HasConstraintName("ChassisTypeId");

                    b.HasOne("Domain.Models.Color", "Color")
                        .WithMany("CarProducts")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("ColorId_fkey");

                    b.HasOne("Domain.Models.CarFuelType", "FuelType")
                        .WithMany("CarProducts")
                        .HasForeignKey("FuelTypeId")
                        .IsRequired()
                        .HasConstraintName("FuelTypeId");

                    b.HasOne("Domain.Models.CarModel", "Model")
                        .WithMany("CarProducts")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("ModelId");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("CarProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.Navigation("CarProductCategory");

                    b.Navigation("ChassisType");

                    b.Navigation("Color");

                    b.Navigation("FuelType");

                    b.Navigation("Model");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.ComputerProduct", b =>
                {
                    b.HasOne("Domain.Models.ComputerBrand", "Brand")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("BrandId_fkey");

                    b.HasOne("Domain.Models.ComputerOperatingSystem", "OperatingSystem")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("OperatingSystemId")
                        .IsRequired()
                        .HasConstraintName("OperatingSystemId_fkey");

                    b.HasOne("Domain.Models.ComputerProcessor", "Processor")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("ProcessorId")
                        .IsRequired()
                        .HasConstraintName("ProcessorId_fkey");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.HasOne("Domain.Models.ComputerRAM", "RAM")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("RAMId")
                        .IsRequired()
                        .HasConstraintName("RAMId_fkey");

                    b.HasOne("Domain.Models.ComputerSSDCapacity", "SSDCapacity")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("SSDCapacityId")
                        .IsRequired()
                        .HasConstraintName("SSDCapacityId_fkey");

                    b.HasOne("Domain.Models.ComputerVideoCard", "VideoCard")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("VideoCardId")
                        .IsRequired()
                        .HasConstraintName("VideoCardId_fkey");

                    b.Navigation("Brand");

                    b.Navigation("OperatingSystem");

                    b.Navigation("Processor");

                    b.Navigation("Product");

                    b.Navigation("RAM");

                    b.Navigation("SSDCapacity");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("Domain.Models.PhoneModel", b =>
                {
                    b.HasOne("Domain.Models.PhoneBrand", "Brand")
                        .WithMany("PhoneModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("BrandId_fkey");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Models.PhoneProduct", b =>
                {
                    b.HasOne("Domain.Models.Color", "Color")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("ColorId_fkey");

                    b.HasOne("Domain.Models.PhoneInternalMemory", "InternalMemory")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("InternalMemoryId")
                        .IsRequired()
                        .HasConstraintName("InternalMemoryId_fkey");

                    b.HasOne("Domain.Models.PhoneModel", "Model")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("ModelId_fkey");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.HasOne("Domain.Models.PhoneRAM", "RAM")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("RAMId")
                        .IsRequired()
                        .HasConstraintName("RAMId_fkey");

                    b.Navigation("Color");

                    b.Navigation("InternalMemory");

                    b.Navigation("Model");

                    b.Navigation("Product");

                    b.Navigation("RAM");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.User", "CreatorUser")
                        .WithMany("Products")
                        .HasForeignKey("CreatorUserId")
                        .IsRequired()
                        .HasConstraintName("Product_CreatorUserId_fkey");

                    b.HasOne("Domain.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("ProductCategories_fkey");

                    b.Navigation("CreatorUser");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserFavouriteProduct", b =>
                {
                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("UserFavouriteProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserFavouriteProducts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("UserId_fkey");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Models.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.CarBrand", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("Domain.Models.CarChassisType", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.CarFuelType", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.CarModel", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.CarProductCategory", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.Color", b =>
                {
                    b.Navigation("CarProducts");

                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerBrand", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerOperatingSystem", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerProcessor", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerRAM", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerSSDCapacity", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerVideoCard", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Models.PhoneBrand", b =>
                {
                    b.Navigation("PhoneModels");
                });

            modelBuilder.Entity("Domain.Models.PhoneInternalMemory", b =>
                {
                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.PhoneModel", b =>
                {
                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.PhoneRAM", b =>
                {
                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("CarProducts");

                    b.Navigation("ComputerProducts");

                    b.Navigation("PhoneProducts");

                    b.Navigation("UserFavouriteProducts");
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserFavouriteProducts");

                    b.Navigation("UserOperationClaims");

                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
