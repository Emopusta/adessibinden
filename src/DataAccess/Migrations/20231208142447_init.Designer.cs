// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AdessibindenContext))]
    [Migration("20231208142447_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.CarBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CarBrands", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarChassisType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CarChassisTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarFuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CarFuelTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("BrandId");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("CarModels", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CarProductCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CarProductCategoryId");

                    b.Property<Guid>("ChassisTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("ChassisTypeId");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("ColorId");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<short>("EngineDisplacement")
                        .HasColumnType("smallint");

                    b.Property<short>("EnginePower")
                        .HasColumnType("smallint");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("FuelTypeId");

                    b.Property<short>("Gear")
                        .HasColumnType("smallint");

                    b.Property<int>("Kilometer")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModelId");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Warranty")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CarProductCategoryId");

                    b.HasIndex("ChassisTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductId");

                    b.ToTable("CarProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CarProductCategories");
                });

            modelBuilder.Entity("Domain.Models.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Colors", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComputerBrands", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerOperatingSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComputerOperatingSystems", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerProcessor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<short?>("Gen")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComputerProcessors", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("BrandId");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("OperatingSystemId")
                        .HasColumnType("uuid")
                        .HasColumnName("OperatingSystemId");

                    b.Property<Guid>("ProcessorId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProcessorId");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("RAMId")
                        .HasColumnType("uuid")
                        .HasColumnName("RAMId");

                    b.Property<Guid>("SSDCapacityId")
                        .HasColumnType("uuid")
                        .HasColumnName("SSDCapacityId");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("VideoCardId")
                        .HasColumnType("uuid")
                        .HasColumnName("VideoCardId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RAMId");

                    b.HasIndex("SSDCapacityId");

                    b.HasIndex("VideoCardId");

                    b.ToTable("ComputerProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerRAM", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Memory");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComputerRAMs", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerSSDCapacity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Capacity");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComputerSSDCapacities", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ComputerVideoCard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Memory");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComputerVideoCards", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("PhoneBrands", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneInternalMemory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Capacity");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("PhoneInternalMemories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("BrandId");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("PhoneModels", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid")
                        .HasColumnName("ColorId");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("InternalMemoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("InternalMemoryId");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModelId");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("RAMId")
                        .HasColumnType("uuid")
                        .HasColumnName("RAMId");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("UsageStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("UsageStatus");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("InternalMemoryId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RAMId");

                    b.ToTable("PhoneProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PhoneRAM", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Memory");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("PhoneRAMs", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatorUserId");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductCategoryId");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("PasswordHash");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserFavouriteProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavouriteProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .HasColumnType("character varying")
                        .HasColumnName("Address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CreatedDate");

                    b.Property<DateOnly?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("LastName");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CarModel", b =>
                {
                    b.HasOne("Domain.Models.CarBrand", "Brand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("BrandId_fkey");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Models.CarProduct", b =>
                {
                    b.HasOne("Domain.Models.CarProductCategory", "CarProductCategory")
                        .WithMany("CarProducts")
                        .HasForeignKey("CarProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("CarProductCategoryId_fkey");

                    b.HasOne("Domain.Models.CarChassisType", "ChassisType")
                        .WithMany("CarProducts")
                        .HasForeignKey("ChassisTypeId")
                        .IsRequired()
                        .HasConstraintName("ChassisTypeId");

                    b.HasOne("Domain.Models.Color", "Color")
                        .WithMany("CarProducts")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("ColorId_fkey");

                    b.HasOne("Domain.Models.CarFuelType", "FuelType")
                        .WithMany("CarProducts")
                        .HasForeignKey("FuelTypeId")
                        .IsRequired()
                        .HasConstraintName("FuelTypeId");

                    b.HasOne("Domain.Models.CarModel", "Model")
                        .WithMany("CarProducts")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("ModelId");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("CarProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.Navigation("CarProductCategory");

                    b.Navigation("ChassisType");

                    b.Navigation("Color");

                    b.Navigation("FuelType");

                    b.Navigation("Model");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.ComputerProduct", b =>
                {
                    b.HasOne("Domain.Models.ComputerBrand", "Brand")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("BrandId_fkey");

                    b.HasOne("Domain.Models.ComputerOperatingSystem", "OperatingSystem")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("OperatingSystemId")
                        .IsRequired()
                        .HasConstraintName("OperatingSystemId_fkey");

                    b.HasOne("Domain.Models.ComputerProcessor", "Processor")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("ProcessorId")
                        .IsRequired()
                        .HasConstraintName("ProcessorId_fkey");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.HasOne("Domain.Models.ComputerRAM", "RAM")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("RAMId")
                        .IsRequired()
                        .HasConstraintName("RAMId_fkey");

                    b.HasOne("Domain.Models.ComputerSSDCapacity", "SSDCapacity")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("SSDCapacityId")
                        .IsRequired()
                        .HasConstraintName("SSDCapacityId_fkey");

                    b.HasOne("Domain.Models.ComputerVideoCard", "VideoCard")
                        .WithMany("ComputerProducts")
                        .HasForeignKey("VideoCardId")
                        .IsRequired()
                        .HasConstraintName("VideoCardId_fkey");

                    b.Navigation("Brand");

                    b.Navigation("OperatingSystem");

                    b.Navigation("Processor");

                    b.Navigation("Product");

                    b.Navigation("RAM");

                    b.Navigation("SSDCapacity");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("Domain.Models.PhoneModel", b =>
                {
                    b.HasOne("Domain.Models.PhoneBrand", "Brand")
                        .WithMany("PhoneModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("BrandId_fkey");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Models.PhoneProduct", b =>
                {
                    b.HasOne("Domain.Models.Color", "Color")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("ColorId_fkey");

                    b.HasOne("Domain.Models.PhoneInternalMemory", "InternalMemory")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("InternalMemoryId")
                        .IsRequired()
                        .HasConstraintName("InternalMemoryId_fkey");

                    b.HasOne("Domain.Models.PhoneModel", "Model")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("ModelId_fkey");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.HasOne("Domain.Models.PhoneRAM", "RAM")
                        .WithMany("PhoneProducts")
                        .HasForeignKey("RAMId")
                        .IsRequired()
                        .HasConstraintName("RAMId_fkey");

                    b.Navigation("Color");

                    b.Navigation("InternalMemory");

                    b.Navigation("Model");

                    b.Navigation("Product");

                    b.Navigation("RAM");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.User", "CreatorUser")
                        .WithMany("Products")
                        .HasForeignKey("CreatorUserId")
                        .IsRequired()
                        .HasConstraintName("Product_CreatorUserId_fkey");

                    b.HasOne("Domain.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("ProductCategories_fkey");

                    b.Navigation("CreatorUser");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.Models.UserFavouriteProduct", b =>
                {
                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("UserFavouriteProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductId_fkey");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserFavouriteProducts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("UserId_fkey");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.CarBrand", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("Domain.Models.CarChassisType", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.CarFuelType", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.CarModel", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.CarProductCategory", b =>
                {
                    b.Navigation("CarProducts");
                });

            modelBuilder.Entity("Domain.Models.Color", b =>
                {
                    b.Navigation("CarProducts");

                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerBrand", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerOperatingSystem", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerProcessor", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerRAM", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerSSDCapacity", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.ComputerVideoCard", b =>
                {
                    b.Navigation("ComputerProducts");
                });

            modelBuilder.Entity("Domain.Models.PhoneBrand", b =>
                {
                    b.Navigation("PhoneModels");
                });

            modelBuilder.Entity("Domain.Models.PhoneInternalMemory", b =>
                {
                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.PhoneModel", b =>
                {
                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.PhoneRAM", b =>
                {
                    b.Navigation("PhoneProducts");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("CarProducts");

                    b.Navigation("ComputerProducts");

                    b.Navigation("PhoneProducts");

                    b.Navigation("UserFavouriteProducts");
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("UserFavouriteProducts");

                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
